name: CI

on:
  push:
    branches: [main]

  pull_request:
    branches: [main]

jobs:
  instrumentation-test:
    name: Perform Instrumentation Testing
    needs: [unit-test]
    runs-on: macos-latest
    steps:
      - name: Checkout the code
        uses: actions/checkout@v2
  
      - name: Set up Java JDK 17
        uses: actions/setup-java@v1
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Set up Android SDK
        uses: actions/setup-android@v2
        with:
          api-level: 29
          target: default
          arch: x86_64
          profile: default
          channel: stable

      - name: Start Android Emulator
        uses: reactivecircus/android-emulator-runner@v2
        with:
          api-level: 29
          script: ./gradlew connectedCheck
          target: default
          arch: x86_64
          profile: default
          avd-name: test
          emulator-options: "-no-snapshot -no-boot-anim -no-window"
          disable-animations: true
          force-avd-creation: true
          adb-channel: stable
          boot-timeout: 600 # Increased timeout to 600 seconds

      - name: Wait for emulator to boot
        run: |
          boot_completed=""
          retry_count=0
          while [ -z "$boot_completed" ] && [ $retry_count -lt 10 ]; do
            boot_completed=$(adb -s emulator-5554 shell getprop sys.boot_completed 2>&1 | tr -d '\r')
            if [ "$boot_completed" == "1" ]; then
              echo "Emulator booted successfully!"
              break
            fi
            echo "Waiting for emulator to boot... ($retry_count)"
            sleep 15
            retry_count=$((retry_count+1))
          done
          if [ -z "$boot_completed" ] || [ "$boot_completed" != "1" ]; then
            echo "Emulator failed to boot"
            exit 1
          fi

      - name: Run espresso tests
        run: ./gradlew connectedCheck
  
      - name: Upload Instrumentation Test report
        uses: actions/upload-artifact@v2
        with:
          name: instrumentation_test_report
          path: app/build/reports/androidTests/connected


# name: CI

# on:
#   push:
#     branches: [main]

#   pull_request:
#     branches: [main]

# jobs:
#   start:
#     runs-on: ubuntu-latest
#     steps:
#       - name: Checkout the code
#         uses: actions/checkout@v2

#       - name: Set up Java JDK 17
#         uses: actions/setup-java@v1
#         with:
#           java-version: '17'
#           distribution: 'temurin' # Or 'zulu' or 'adopt' depending on the distribution you prefer

#       - name: Run sample script
#         run: echo Hello, world

#   lint:
#     name: Perform lint check
#     needs: [start]
#     runs-on: ubuntu-latest
#     steps:
#       - name: Checkout the code
#         uses: actions/checkout@v2
        
#       - name: Set up Java JDK 17
#         uses: actions/setup-java@v1
#         with:
#           java-version: '17'
#           distribution: 'temurin'

#       - name: Cache Gradle
#         uses: actions/cache@v2
#         with:
#           path: ~/.gradle/caches
#           key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle') }}
#           restore-keys: ${{ runner.os }}-gradle-

#       - name: Make Gradle executable
#         run: chmod +x ./gradlew
  
#       - name: Run lint
#         run: ./gradlew lintDebug
  
#       - name: Upload html test report
#         uses: actions/upload-artifact@v2
#         with:
#           name: lint.html
#           path: app/build/reports/lint-results-debug.html

#   unit-test:
#     name: Perform Unit Testing
#     needs: [lint]
#     runs-on: ubuntu-latest
#     steps:
#       - name: Checkout the code
#         uses: actions/checkout@v2
  
#       - name: Set up Java JDK 17
#         uses: actions/setup-java@v1
#         with:
#           java-version: '17'
#           distribution: 'temurin'

#       - name: Run tests
#         run: ./gradlew test
  
#       - name: Upload test report
#         uses: actions/upload-artifact@v2
#         with:
#           name: unit_test_report
#           path: app/build/reports/test/testDebugUnitTest/

#   instrumentation-test:
#     name: Perform Instrumentation Testing
#     needs: [unit-test]
#     runs-on: macos-latest
#     steps:
#       - name: Checkout the code
#         uses: actions/checkout@v2
  
#       - name: Set up Java JDK 17
#         uses: actions/setup-java@v1
#         with:
#           java-version: '17'
#           distribution: 'temurin'

#       - name: Run espresso tests
#         uses: reactivecircus/android-emulator-runner@v2
#         with:
#           api-level: 29
#           script: ./gradlew connectedCheck
  
#       - name: Upload Instrumentation Test report
#         uses: actions/upload-artifact@v2
#         with:
#           name: instrumentation_test_report
#           path: app/build/reports/androidTests/connected

#   static-code-analysis:
#     name: Perform static code analysis
#     needs: [instrumentation-test]
#     runs-on: ubuntu-latest
#     steps:
#       - name: Checkout the code
#         uses: actions/checkout@v2
  
#       - name: Set up Java JDK 17
#         uses: actions/setup-java@v1
#         with:
#           java-version: '17'
#           distribution: 'temurin'

#       - name: SonarCloud Scan
#         run: ./gradlew app:sonarqube -Dsonar.login=${{ secrets.SONAR_TOKEN }}
#         env:
#           GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

#   debug-apk:
#     name: Generate Debug APK
#     needs: [static-code-analysis]
#     runs-on: ubuntu-latest
#     steps:
#       - name: Checkout the code
#         uses: actions/checkout@v2
  
#       - name: Set up Java JDK 17
#         uses: actions/setup-java@v1
#         with:
#           java-version: '17'
#           distribution: 'temurin'

#       - name: Build debug APK
#         run: ./gradlew assembleDebug --stacktrace
  
#       - name: Upload APK
#         uses: actions/upload-artifact@v2
#         with:
#           name: sample-app.apk
#           path: app/build/outputs/apk/debug/app-debug.apk



# name: CI

# on:
#   push:
#     branches: [main]

#   pull_request:
#     branches: [main]

# jobs:
#   start:
#     runs-on: ubuntu-latest
#     steps:
#       - name: Checkout the code
#         uses: actions/checkout@v2
  
#       - name: Run sample script
#         run: echo Hello, world

#   lint:
#     name: Perform lint check
#     needs: [start]
#     runs-on: ubuntu-latest
#     steps:
#       - name: Checkout the code
#         uses: actions/checkout@v2
#      # Gradle v8.0.0 requires java JDK v17
#       - name: Set up Java JDK 17
#         uses: actions/setup-java@v1
#         with:
#           java-version: '17'
#       - name: Cache Gradle
#         uses: actions/cache@v2
#         with:
#           path: ~/.gradle/caches
#           key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle') }}
#           restore-keys: ${{ runner.os }}-gradle-

#       - name: Make Gradle executable
#         run: chmod +x ./gradlew
  
#       - name: Run lint
#         run: ./gradlew lintDebug
  
#       - name: Upload html test report
#         uses: actions/upload-artifact@v2
#         with:
#           name: lint.html
#           path: app/build/reports/lint-results-debug.html

#   unit-test:
#     name: Perform Unit Testing
#     needs: [lint]
#     runs-on: ubuntu-latest
#     steps:
#       - name: Checkout the code
#         uses: actions/checkout@v2
  
#       - name: Run tests
#         run: ./gradlew test
  
#       - name: Upload test report
#         uses: actions/upload-artifact@v2  # Fixed here
#         with:
#           name: unit_test_report
#           path: app/build/reports/test/testDebugUnitTest/

#   instrumentation-test:
#     name: Perform Instrumentation Testing
#     needs: [unit-test]
#     runs-on: macos-latest # MacOS runs faster
#     steps:
#       - name: Checkout the code
#         uses: actions/checkout@v2
  
#       # Gradle v8.0.0 requires java JDK v17
#       - name: Set up Java JDK 17
#         uses: actions/setup-java@v1
#         with:
#           java-version: '17'
  
#       - name: Run espresso tests
#         uses: reactivecircus/android-emulator-runner@v2 # 3rd party tool
#         with:
#           api-level: 29
#           script: ./gradlew connectedCheck
  
#       - name: Upload Instrumentation Test report
#         uses: actions/upload-artifact@v2
#         with:
#           name: instrumentation_test_report
#           path: app/build/reports/androidTests/connected

#   static-code-analysis:
#     name: Perform static code analysis
#     needs: [instrumentation-test]
#     runs-on: ubuntu-latest
#     steps:
#       - name: Checkout the code
#         uses: actions/checkout@v2
  
#       - name: Set up Java JDK 17
#         uses: actions/setup-java@v1
#         with:
#           java-version: '17'
  
#       - name: SonarCloud Scan # sonarcloud properties in gradle.properties files
#         run: ./gradlew app:sonarqube -Dsonar.login=${{ secrets.SONAR_TOKEN }}
#         env:
#           GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

#   debug-apk:
#     name: Generate Debug APK
#     needs: [static-code-analysis]
#     runs-on: ubuntu-latest
#     steps:
#       - name: Checkout the code
#         uses: actions/checkout@v2
  
#       - name: Set up Java JDK 17
#         uses: actions/setup-java@v1
#         with:
#           java-version: '17'
  
#       - name: Build debug APK
#         run: ./gradlew assembleDebug --stacktrace
  
#       - name: Upload APK
#         uses: actions/upload-artifact@v2
#         with:
#           name: sample-app.apk
#           path: app/build/outputs/apk/debug/app-debug.apk



# name: CI

# on:
#   push:
#     branches: [main]

#   pull_request:
#     branches: [main]

# jobs:
#   start:
#     runs-on: ubuntu-latest
#     steps:
#       - name: Checkout the code
#         uses: actions/checkout@v2
  
#       - name: Run sample script
#         run: echo Hello, world

#   lint:
#     name: Perform lint check
#     needs: [start]
#     runs-on: ubuntu-latest
#     steps:
#       - name: Checkout the code
#         uses: actions/checkout@v2

#       - name: Cache Gradle
#         uses: actions/cache@v2
#         with:
#           path: ~/.gradle/caches
#           key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle') }}
#           restore-keys: ${{ runner.os }}-gradle-

#       - name: Make Gradle executable
#         run: chmod +x ./gradlew
  
#       - name: Run lint
#         run: ./gradlew lintDebug
  
#       - name: Upload html test report
#         uses: actions/upload-artifact@v2
#         with:
#           name: lint.html
#           path: app/build/reports/lint-results-debug.html

#   unit-test:
#     name: Perform Unit Testing
#     needs: [lint]
#     runs-on: ubuntu-latest
#     steps:
#       - name: Checkout the code
#         uses: actions/checkout@v2
  
#       - name: Run tests
#         run: ./gradlew test
  
#       - name: Upload test report
#         uses: actions.upload-artifact@v2
#         with:
#           name: unit_test_report
#           path: app/build/reports/test/testDebugUnitTest/

#   instrumentation-test:
#     name: Perform Instrumentation Testing
#     needs: [unit-test]
#     runs-on: macos-latest # MacOS runs faster
#     steps:
#       - name: Checkout the code
#         uses: actions/checkout@v2
  
#       # Gradle v8.0.0 requires java JDK v17
#       - name: Set up Java JDK 17
#         uses: actions/setup-java@v1
#         with:
#           java-version: '17'
  
#       - name: Run espresso tests
#         uses: reactivecircus/android-emulator-runner@v2 # 3rd party tool
#         with:
#           api-level: 29
#           script: ./gradlew connectedCheck
  
#       - name: Upload Instrumentation Test report
#         uses: actions/upload-artifact@v2
#         with:
#           name: instrumentation_test_report
#           path: app/build/reports/androidTests/connected

#   static-code-analysis:
#     name: Perform static code analysis
#     needs: [instrumentation-test]
#     runs-on: ubuntu-latest
#     steps:
#       - name: Checkout the code
#         uses: actions/checkout@v2
  
#       - name: Set up Java JDK 17
#         uses: actions/setup-java@v1
#         with:
#           java-version: '17'
  
#       - name: SonarCloud Scan # sonarcloud properties in gradle.properties files
#         run: ./gradlew app:sonarqube -Dsonar.login=${{ secrets.SONAR_TOKEN }}
#         env:
#           GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

#   debug-apk:
#     name: Generate Debug APK
#     needs: [static-code-analysis]
#     runs-on: ubuntu-latest
#     steps:
#       - name: Checkout the code
#         uses: actions/checkout@v2
  
#       - name: Set up Java JDK 17
#         uses: actions/setup-java@v1
#         with:
#           java-version: '17'
  
#       - name: Build debug APK
#         run: ./gradlew assembleDebug --stacktrace
  
#       - name: Upload APK
#         uses: actions/upload-artifact@v2
#         with:
#           name: sample-app.apk
#           path: app/build/outputs/apk/debug/app-debug.apk
